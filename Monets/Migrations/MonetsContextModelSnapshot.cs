// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monets.Api.Database;

namespace Monets.Api.Migrations
{
    [DbContext(typeof(MonetsContext))]
    partial class MonetsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Monets.Api.Database.Favorit", b =>
                {
                    b.Property<int>("FavoritId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("JeloId")
                        .HasColumnType("int");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int");

                    b.HasKey("FavoritId");

                    b.HasIndex(new[] { "JeloId" }, "IX_Favorit_JeloId");

                    b.HasIndex(new[] { "KlijentId" }, "IX_Favorit_KlijentId");

                    b.ToTable("Favorit");
                });

            modelBuilder.Entity("Monets.Api.Database.Grad", b =>
                {
                    b.Property<int>("GradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradId");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            GradId = 1,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            GradId = 2,
                            Naziv = "Mostar"
                        },
                        new
                        {
                            GradId = 3,
                            Naziv = "Bugojno"
                        },
                        new
                        {
                            GradId = 4,
                            Naziv = "Gornji Vakuf"
                        },
                        new
                        {
                            GradId = 5,
                            Naziv = "Tuzla"
                        },
                        new
                        {
                            GradId = 6,
                            Naziv = "Zenica"
                        },
                        new
                        {
                            GradId = 7,
                            Naziv = "Bihać"
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Jelo", b =>
                {
                    b.Property<int>("JeloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Cijena")
                        .HasColumnType("float");

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<string>("NazivJela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisJela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlikaPutanja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int?>("VrijemeIzradeUminutama")
                        .HasColumnType("int");

                    b.HasKey("JeloId");

                    b.HasIndex(new[] { "KategorijaId" }, "IX_Jelo_KategorijaId");

                    b.ToTable("Jelo");

                    b.HasData(
                        new
                        {
                            JeloId = 1,
                            Cijena = 10.0,
                            KategorijaId = 1,
                            NazivJela = "Burek",
                            OpisJela = "Burek je jelo od razvučenog tijesta sa mesom",
                            SlikaPutanja = "burek.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 2,
                            Cijena = 8.0,
                            KategorijaId = 1,
                            NazivJela = "Sirnica",
                            OpisJela = "Sirnica je jelo od razvučenog tijesta sa sirom",
                            SlikaPutanja = "burek.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 3,
                            Cijena = 7.0,
                            KategorijaId = 1,
                            NazivJela = "Zeljanica",
                            OpisJela = "Zeljanica je jelo od razvučenog tijesta sa zeljom",
                            SlikaPutanja = "burek.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 4,
                            Cijena = 7.0,
                            KategorijaId = 1,
                            NazivJela = "Krompiruša",
                            OpisJela = "Krompiruša je jelo od razvučenog tijesta sa krompirom",
                            SlikaPutanja = "burek.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 5,
                            Cijena = 9.0,
                            KategorijaId = 1,
                            NazivJela = "Tirit",
                            OpisJela = "Tirit je jelo od razvučenog tijesta sa piletinom",
                            SlikaPutanja = "burek.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 6,
                            Cijena = 10.0,
                            KategorijaId = 2,
                            NazivJela = "Margarita",
                            OpisJela = "Klasična pizza oljuštenim paradajzom i mocarelom",
                            SlikaPutanja = "pizza.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 7,
                            Cijena = 11.0,
                            KategorijaId = 2,
                            NazivJela = "Capricosa",
                            OpisJela = "Pizza sa paradaz-pireom, gaudom, šampinjonima i maslinama",
                            SlikaPutanja = "pizza.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 8,
                            Cijena = 12.0,
                            KategorijaId = 2,
                            NazivJela = "Piza - 4 god. doba",
                            OpisJela = "Sastojci : paradajz, mocarela, gljive, školjke, rakovi, paprika, crne masline, maslinovo ulje, limunov sok",
                            SlikaPutanja = "pizza.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 9,
                            Cijena = 15.0,
                            KategorijaId = 2,
                            NazivJela = "Pizza četiri sira",
                            OpisJela = "Pizza od 4 sira: mocarela, straćino, fontina, gorgonzola",
                            SlikaPutanja = "pizza.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 10,
                            Cijena = 12.0,
                            KategorijaId = 2,
                            NazivJela = "Funghi ",
                            OpisJela = "Pizza sa umakom od paradajza, kačkavalj, šampinjoni, ljute papričice",
                            SlikaPutanja = "pizza.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 11,
                            Cijena = 12.0,
                            KategorijaId = 2,
                            NazivJela = "Funghi ",
                            OpisJela = "Pizza sa umakom od paradajza, kačkavalj, šampinjoni, ljute papričice",
                            SlikaPutanja = "pizza.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 12,
                            Cijena = 6.0,
                            KategorijaId = 3,
                            NazivJela = "Grah",
                            OpisJela = "Tradicionalni grah sa sudžukom",
                            SlikaPutanja = "supa.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 13,
                            Cijena = 3.0,
                            KategorijaId = 3,
                            NazivJela = "Goveđa supa",
                            OpisJela = "Supa od govedine",
                            SlikaPutanja = "supa.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 22,
                            Cijena = 2.0,
                            KategorijaId = 3,
                            NazivJela = "Pileća supa",
                            OpisJela = "Supa od piletine",
                            SlikaPutanja = "supa.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 14,
                            Cijena = 3.0,
                            KategorijaId = 4,
                            NazivJela = "Coca Cola",
                            OpisJela = "Klasična Coca Cola",
                            SlikaPutanja = "drink.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 15,
                            Cijena = 3.0,
                            KategorijaId = 4,
                            NazivJela = "Fanta",
                            OpisJela = "Klasična Fanta",
                            SlikaPutanja = "drink.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 16,
                            Cijena = 3.0,
                            KategorijaId = 4,
                            NazivJela = "Pepsi",
                            OpisJela = "Klasični pepsi",
                            SlikaPutanja = "drink.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 17,
                            Cijena = 3.0,
                            KategorijaId = 4,
                            NazivJela = "Cockta",
                            OpisJela = "Klasična Cockta",
                            SlikaPutanja = "drink.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 18,
                            Cijena = 2.0,
                            KategorijaId = 4,
                            NazivJela = "Mineralna voda",
                            OpisJela = "Mineralna voda",
                            SlikaPutanja = "drink.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 19,
                            Cijena = 5.0,
                            KategorijaId = 4,
                            NazivJela = "Orangina",
                            OpisJela = "Osvježavajuće bezalkoholno piće od narandže",
                            SlikaPutanja = "drink.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        },
                        new
                        {
                            JeloId = 20,
                            Cijena = 5.0,
                            KategorijaId = 4,
                            NazivJela = "Schweppes",
                            OpisJela = "Osvježavajuće bezalkoholno piće",
                            SlikaPutanja = "drink.png",
                            Status = true,
                            VrijemeIzradeUminutama = 10
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.JeloMeni", b =>
                {
                    b.Property<int>("JeloMeniId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("JeloId")
                        .HasColumnType("int");

                    b.Property<int?>("MeniId")
                        .HasColumnType("int");

                    b.HasKey("JeloMeniId");

                    b.HasIndex(new[] { "JeloId" }, "IX_JeloMeni_JeloId");

                    b.HasIndex(new[] { "MeniId" }, "IX_JeloMeni_MeniId");

                    b.ToTable("JeloMeni");
                });

            modelBuilder.Entity("Monets.Api.Database.JeloRezervacija", b =>
                {
                    b.Property<int>("JeloRezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JeloId")
                        .HasColumnType("int");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("RezervacijaId")
                        .HasColumnType("int");

                    b.HasKey("JeloRezervacijaId");

                    b.HasIndex(new[] { "JeloId" }, "IX_JeloRezervacija_JeloId");

                    b.HasIndex(new[] { "RezervacijaId" }, "IX_JeloRezervacija_RezervacijaId");

                    b.ToTable("JeloRezervacija");

                    b.HasData(
                        new
                        {
                            JeloRezervacijaId = 1,
                            JeloId = 1,
                            Kolicina = 4,
                            RezervacijaId = 1
                        },
                        new
                        {
                            JeloRezervacijaId = 2,
                            JeloId = 12,
                            Kolicina = 3,
                            RezervacijaId = 1
                        },
                        new
                        {
                            JeloRezervacijaId = 3,
                            JeloId = 13,
                            Kolicina = 2,
                            RezervacijaId = 1
                        },
                        new
                        {
                            JeloRezervacijaId = 4,
                            JeloId = 1,
                            Kolicina = 1,
                            RezervacijaId = 2
                        },
                        new
                        {
                            JeloRezervacijaId = 5,
                            JeloId = 5,
                            Kolicina = 1,
                            RezervacijaId = 2
                        },
                        new
                        {
                            JeloRezervacijaId = 6,
                            JeloId = 7,
                            Kolicina = 1,
                            RezervacijaId = 3
                        },
                        new
                        {
                            JeloRezervacijaId = 7,
                            JeloId = 8,
                            Kolicina = 1,
                            RezervacijaId = 3
                        },
                        new
                        {
                            JeloRezervacijaId = 8,
                            JeloId = 15,
                            Kolicina = 4,
                            RezervacijaId = 4
                        },
                        new
                        {
                            JeloRezervacijaId = 9,
                            JeloId = 16,
                            Kolicina = 2,
                            RezervacijaId = 4
                        },
                        new
                        {
                            JeloRezervacijaId = 10,
                            JeloId = 2,
                            Kolicina = 2,
                            RezervacijaId = 5
                        },
                        new
                        {
                            JeloRezervacijaId = 11,
                            JeloId = 3,
                            Kolicina = 3,
                            RezervacijaId = 5
                        },
                        new
                        {
                            JeloRezervacijaId = 12,
                            JeloId = 3,
                            Kolicina = 3,
                            RezervacijaId = 6
                        },
                        new
                        {
                            JeloRezervacijaId = 13,
                            JeloId = 5,
                            Kolicina = 3,
                            RezervacijaId = 6
                        },
                        new
                        {
                            JeloRezervacijaId = 14,
                            JeloId = 7,
                            Kolicina = 2,
                            RezervacijaId = 7
                        },
                        new
                        {
                            JeloRezervacijaId = 15,
                            JeloId = 2,
                            Kolicina = 2,
                            RezervacijaId = 7
                        },
                        new
                        {
                            JeloRezervacijaId = 16,
                            JeloId = 15,
                            Kolicina = 2,
                            RezervacijaId = 8
                        },
                        new
                        {
                            JeloRezervacijaId = 35,
                            JeloId = 15,
                            Kolicina = 2,
                            RezervacijaId = 8
                        },
                        new
                        {
                            JeloRezervacijaId = 17,
                            JeloId = 12,
                            Kolicina = 3,
                            RezervacijaId = 9
                        },
                        new
                        {
                            JeloRezervacijaId = 18,
                            JeloId = 7,
                            Kolicina = 1,
                            RezervacijaId = 9
                        },
                        new
                        {
                            JeloRezervacijaId = 19,
                            JeloId = 2,
                            Kolicina = 2,
                            RezervacijaId = 9
                        },
                        new
                        {
                            JeloRezervacijaId = 20,
                            JeloId = 9,
                            Kolicina = 2,
                            RezervacijaId = 10
                        },
                        new
                        {
                            JeloRezervacijaId = 21,
                            JeloId = 2,
                            Kolicina = 2,
                            RezervacijaId = 10
                        },
                        new
                        {
                            JeloRezervacijaId = 22,
                            JeloId = 11,
                            Kolicina = 6,
                            RezervacijaId = 11
                        },
                        new
                        {
                            JeloRezervacijaId = 23,
                            JeloId = 18,
                            Kolicina = 2,
                            RezervacijaId = 11
                        },
                        new
                        {
                            JeloRezervacijaId = 24,
                            JeloId = 11,
                            Kolicina = 2,
                            RezervacijaId = 12
                        },
                        new
                        {
                            JeloRezervacijaId = 25,
                            JeloId = 1,
                            Kolicina = 2,
                            RezervacijaId = 12
                        },
                        new
                        {
                            JeloRezervacijaId = 26,
                            JeloId = 3,
                            Kolicina = 1,
                            RezervacijaId = 13
                        },
                        new
                        {
                            JeloRezervacijaId = 27,
                            JeloId = 7,
                            Kolicina = 1,
                            RezervacijaId = 14
                        },
                        new
                        {
                            JeloRezervacijaId = 28,
                            JeloId = 7,
                            Kolicina = 1,
                            RezervacijaId = 15
                        },
                        new
                        {
                            JeloRezervacijaId = 29,
                            JeloId = 9,
                            Kolicina = 1,
                            RezervacijaId = 16
                        },
                        new
                        {
                            JeloRezervacijaId = 30,
                            JeloId = 1,
                            Kolicina = 1,
                            RezervacijaId = 17
                        },
                        new
                        {
                            JeloRezervacijaId = 31,
                            JeloId = 12,
                            Kolicina = 2,
                            RezervacijaId = 18
                        },
                        new
                        {
                            JeloRezervacijaId = 32,
                            JeloId = 19,
                            Kolicina = 2,
                            RezervacijaId = 19
                        },
                        new
                        {
                            JeloRezervacijaId = 33,
                            JeloId = 19,
                            Kolicina = 2,
                            RezervacijaId = 20
                        },
                        new
                        {
                            JeloRezervacijaId = 34,
                            JeloId = 19,
                            Kolicina = 2,
                            RezervacijaId = 21
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Kategorija", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SlikaPutanja")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategorijaId");

                    b.ToTable("Kategorija");

                    b.HasData(
                        new
                        {
                            KategorijaId = 1,
                            Naziv = "Pite"
                        },
                        new
                        {
                            KategorijaId = 2,
                            Naziv = "Pize"
                        },
                        new
                        {
                            KategorijaId = 3,
                            Naziv = "Čorbe i supe"
                        },
                        new
                        {
                            KategorijaId = 4,
                            Naziv = "Piće"
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Klijent", b =>
                {
                    b.Property<int>("KlijentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnickiRacunId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("KlijentId");

                    b.HasIndex(new[] { "GradId" }, "IX_Klijent_GradId");

                    b.HasIndex(new[] { "KorisnickiRacunId" }, "IX_Klijent_KorisnickiRacunId")
                        .IsUnique();

                    b.ToTable("Klijent");

                    b.HasData(
                        new
                        {
                            KlijentId = 1,
                            GradId = 1,
                            KorisnickiRacunId = 8,
                            Status = true
                        },
                        new
                        {
                            KlijentId = 2,
                            GradId = 1,
                            KorisnickiRacunId = 9,
                            Status = true
                        },
                        new
                        {
                            KlijentId = 3,
                            GradId = 1,
                            KorisnickiRacunId = 10,
                            Status = true
                        },
                        new
                        {
                            KlijentId = 4,
                            GradId = 1,
                            KorisnickiRacunId = 11,
                            Status = true
                        },
                        new
                        {
                            KlijentId = 5,
                            GradId = 1,
                            KorisnickiRacunId = 12,
                            Status = false
                        },
                        new
                        {
                            KlijentId = 6,
                            GradId = 1,
                            KorisnickiRacunId = 13,
                            Status = false
                        },
                        new
                        {
                            KlijentId = 7,
                            GradId = 1,
                            KorisnickiRacunId = 14,
                            Status = true
                        },
                        new
                        {
                            KlijentId = 8,
                            GradId = 1,
                            KorisnickiRacunId = 15,
                            Status = true
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.KorisnickiRacun", b =>
                {
                    b.Property<int>("KorisnickiRacunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EmailVerified")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GUID");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PassCodeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlikaPutanja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KorisnickiRacunId");

                    b.ToTable("KorisnickiRacun");

                    b.HasData(
                        new
                        {
                            KorisnickiRacunId = 1,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 492, DateTimeKind.Local).AddTicks(6092),
                            DatumRodjenja = new DateTime(1991, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "desktop@monets.com",
                            EmailVerified = true,
                            Ime = "Desktop",
                            KorisnickoIme = "desktop",
                            LozinkaHash = "dW/jDfpjrrtsT2jBb4LBd6swn/I=",
                            LozinkaSalt = "Hu7Udq6AaxndW09xVRVW8g==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik",
                            SlikaPutanja = "profile_pic.png",
                            Status = true,
                            Telefon = "061-222-333"
                        },
                        new
                        {
                            KorisnickiRacunId = 2,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 499, DateTimeKind.Local).AddTicks(8029),
                            DatumRodjenja = new DateTime(1995, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "uposlenik1@monets.com",
                            EmailVerified = true,
                            Ime = "Uposlenik1",
                            KorisnickoIme = "uposlenik1",
                            LozinkaHash = "Ah36GzWPtu55I6y4PBFtmqca4UE=",
                            LozinkaSalt = "80vnxV8y5AcNOogcg1sbTg==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik",
                            SlikaPutanja = "profile_pic.png",
                            Status = true,
                            Telefon = "061-111-333"
                        },
                        new
                        {
                            KorisnickiRacunId = 3,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 499, DateTimeKind.Local).AddTicks(9018),
                            DatumRodjenja = new DateTime(1985, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "uposlenik2@monets.com",
                            EmailVerified = true,
                            Ime = "Uposlenik2",
                            KorisnickoIme = "uposlenik2",
                            LozinkaHash = "/ovmGwQelyw11/5+dI4JpdsVguA=",
                            LozinkaSalt = "mHim+MW7WLrdlB5F4ZTmfQ==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik2",
                            SlikaPutanja = "profile_pic.png",
                            Status = true,
                            Telefon = "061-111-4444"
                        },
                        new
                        {
                            KorisnickiRacunId = 4,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 499, DateTimeKind.Local).AddTicks(9211),
                            DatumRodjenja = new DateTime(1982, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "uposlenik3@monets.com",
                            EmailVerified = true,
                            Ime = "Uposlenik3",
                            KorisnickoIme = "uposlenik2",
                            LozinkaHash = "wEYPqmvwIZ5gUETZeqjA8ybC+VY=",
                            LozinkaSalt = "FcwMYHeHRkNpAx638FXRTQ==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik3",
                            SlikaPutanja = "profile_pic.png",
                            Status = true,
                            Telefon = "062-333-333"
                        },
                        new
                        {
                            KorisnickiRacunId = 5,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 499, DateTimeKind.Local).AddTicks(9370),
                            DatumRodjenja = new DateTime(1989, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "uposlenik4@monets.com",
                            EmailVerified = true,
                            Ime = "Uposlenik4",
                            KorisnickoIme = "uposlenik4",
                            LozinkaHash = "UypY0GQnL/SUo5dyJydtU1DiMp4=",
                            LozinkaSalt = "A7IYE205DtUmy7QsKkzEZQ==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik4",
                            SlikaPutanja = "profile_pic.png",
                            Status = true,
                            Telefon = "063-123-323"
                        },
                        new
                        {
                            KorisnickiRacunId = 6,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 499, DateTimeKind.Local).AddTicks(9507),
                            DatumRodjenja = new DateTime(1999, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "uposlenik5@monets.com",
                            EmailVerified = true,
                            Ime = "Uposlenik5",
                            KorisnickoIme = "uposlenik5",
                            LozinkaHash = "SjIH/XkGbYk+nOtRTYPcAGn+3Lw=",
                            LozinkaSalt = "+wPOEh+N8vXpOK3PNHzv4w==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik5",
                            SlikaPutanja = "profile_pic.png",
                            Status = false,
                            Telefon = "063-423-444"
                        },
                        new
                        {
                            KorisnickiRacunId = 7,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 499, DateTimeKind.Local).AddTicks(9632),
                            DatumRodjenja = new DateTime(1992, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "uposlenik6@monets.com",
                            EmailVerified = true,
                            Ime = "Uposlenik6",
                            KorisnickoIme = "uposlenik6",
                            LozinkaHash = "K3WikWreNg+w5swRFJMp4GHEgPE=",
                            LozinkaSalt = "tbVMmvSm1EOPk+1ZX0RJ1Q==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik6",
                            SlikaPutanja = "profile_pic.png",
                            Status = false,
                            Telefon = "062-223-666"
                        },
                        new
                        {
                            KorisnickiRacunId = 8,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 499, DateTimeKind.Local).AddTicks(9850),
                            DatumRodjenja = new DateTime(1999, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mobile@monets.com",
                            EmailVerified = true,
                            Ime = "Mobile",
                            KorisnickoIme = "mobile",
                            LozinkaHash = "+LdEe8+yalXMf5Lw62XmR4fWL2k=",
                            LozinkaSalt = "RucNZd9aLzKbyI3mtQiLqA==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik",
                            SlikaPutanja = "mobile_user.jpg",
                            Status = true,
                            Telefon = "062-223-666"
                        },
                        new
                        {
                            KorisnickiRacunId = 9,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 499, DateTimeKind.Local).AddTicks(9977),
                            DatumRodjenja = new DateTime(1999, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "klijent@monets.com",
                            EmailVerified = true,
                            Ime = "Klijent",
                            KorisnickoIme = "Klijent",
                            LozinkaHash = "MF3VXhPbX/tf8zBGXrI4Zy6iuIQ=",
                            LozinkaSalt = "A6FukNww20nJAf9cXQXNWg==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik",
                            SlikaPutanja = "mobile_user.jpg",
                            Status = true,
                            Telefon = "063-223-666"
                        },
                        new
                        {
                            KorisnickiRacunId = 10,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 500, DateTimeKind.Local).AddTicks(98),
                            DatumRodjenja = new DateTime(2001, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "klijent1@monets.com",
                            EmailVerified = true,
                            Ime = "Klijent1",
                            KorisnickoIme = "klijent1",
                            LozinkaHash = "C1daKmDRANJY52Ih19R3QX7jWl4=",
                            LozinkaSalt = "1Zl7xqcgZyDplUTh3csTeA==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik1",
                            SlikaPutanja = "mobile_user.jpg",
                            Status = true,
                            Telefon = "061-123-966"
                        },
                        new
                        {
                            KorisnickiRacunId = 11,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 500, DateTimeKind.Local).AddTicks(223),
                            DatumRodjenja = new DateTime(1992, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "klijent2@monets.com",
                            EmailVerified = true,
                            Ime = "Klijent2",
                            KorisnickoIme = "klijent2",
                            LozinkaHash = "owQgZM0cEZMsciL2CRYWr+5X7qs=",
                            LozinkaSalt = "a3cQviRyeCgqiWn2sq1A3Q==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik2",
                            SlikaPutanja = "mobile_user.jpg",
                            Status = true,
                            Telefon = "061-123-966"
                        },
                        new
                        {
                            KorisnickiRacunId = 12,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 500, DateTimeKind.Local).AddTicks(343),
                            DatumRodjenja = new DateTime(1995, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "klijent3@monets.com",
                            EmailVerified = true,
                            Ime = "Klijent3",
                            KorisnickoIme = "klijent3",
                            LozinkaHash = "EsJLe8ee+4dgyKJUDi/tXfTtvWE=",
                            LozinkaSalt = "K3YgAqOo6sXU3jnaKd6SFQ==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik3",
                            SlikaPutanja = "mobile_user.jpg",
                            Status = false,
                            Telefon = "061-923-922"
                        },
                        new
                        {
                            KorisnickiRacunId = 13,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 500, DateTimeKind.Local).AddTicks(512),
                            DatumRodjenja = new DateTime(1998, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "klijent4@monets.com",
                            EmailVerified = true,
                            Ime = "Klijent4",
                            KorisnickoIme = "klijent4",
                            LozinkaHash = "Z/vTSFN446ZSfMS6fGG8a7Qvurk=",
                            LozinkaSalt = "5L8210XRbNLR5aj/XvZjVw==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik4",
                            SlikaPutanja = "mobile_user.jpg",
                            Status = false,
                            Telefon = "061-923-922"
                        },
                        new
                        {
                            KorisnickiRacunId = 14,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 500, DateTimeKind.Local).AddTicks(640),
                            DatumRodjenja = new DateTime(1998, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "klijent5@monets.com",
                            EmailVerified = true,
                            Ime = "Klijent5",
                            KorisnickoIme = "klijent5",
                            LozinkaHash = "QEQrhazJUNiGnYVHFvjYPVX/WBc=",
                            LozinkaSalt = "21OCmfOlTijJcieRKyAXbw==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik5",
                            SlikaPutanja = "mobile_user.jpg",
                            Status = true,
                            Telefon = "061-923-922"
                        },
                        new
                        {
                            KorisnickiRacunId = 15,
                            Adresa = "Adresa BB",
                            DatumIzmjene = new DateTime(2021, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2022, 3, 23, 22, 39, 56, 500, DateTimeKind.Local).AddTicks(759),
                            DatumRodjenja = new DateTime(1995, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "klijent6@monets.com",
                            EmailVerified = true,
                            Ime = "Klijent6",
                            KorisnickoIme = "klijent6",
                            LozinkaHash = "H0TO/cRIMrniNFJUe0u+9Ls41p8=",
                            LozinkaSalt = "pZ4VUkhxIededW9Kc3fddg==",
                            PassCodeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prezime = "Korisnik6",
                            SlikaPutanja = "mobile_user.jpg",
                            Status = true,
                            Telefon = "061-223-122"
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Meni", b =>
                {
                    b.Property<int>("MeniId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Cijena")
                        .HasColumnType("float");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeniId");

                    b.ToTable("Meni");
                });

            modelBuilder.Entity("Monets.Api.Database.Rejting", b =>
                {
                    b.Property<int>("RejtingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JeloId")
                        .HasColumnType("int");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<double?>("Ocjena")
                        .HasColumnType("float");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.HasKey("RejtingId");

                    b.HasIndex(new[] { "JeloId" }, "IX_Rejting_JeloId");

                    b.HasIndex(new[] { "KlijentId" }, "IX_Rejting_KlijentId");

                    b.ToTable("Rejting");

                    b.HasData(
                        new
                        {
                            RejtingId = 1,
                            JeloId = 1,
                            KlijentId = 1,
                            Ocjena = 5.0
                        },
                        new
                        {
                            RejtingId = 2,
                            JeloId = 1,
                            KlijentId = 2,
                            Ocjena = 4.0
                        },
                        new
                        {
                            RejtingId = 3,
                            JeloId = 2,
                            KlijentId = 3,
                            Ocjena = 4.0
                        },
                        new
                        {
                            RejtingId = 4,
                            JeloId = 3,
                            KlijentId = 4,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 5,
                            JeloId = 4,
                            KlijentId = 5,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 6,
                            JeloId = 5,
                            KlijentId = 6,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 7,
                            JeloId = 6,
                            KlijentId = 7,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 8,
                            JeloId = 7,
                            KlijentId = 8,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 9,
                            JeloId = 8,
                            KlijentId = 8,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 10,
                            JeloId = 9,
                            KlijentId = 8,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 11,
                            JeloId = 10,
                            KlijentId = 7,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 12,
                            JeloId = 11,
                            KlijentId = 6,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 13,
                            JeloId = 12,
                            KlijentId = 5,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 14,
                            JeloId = 13,
                            KlijentId = 6,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 15,
                            JeloId = 14,
                            KlijentId = 5,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 16,
                            JeloId = 15,
                            KlijentId = 4,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 17,
                            JeloId = 16,
                            KlijentId = 4,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 18,
                            JeloId = 17,
                            KlijentId = 3,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 19,
                            JeloId = 18,
                            KlijentId = 2,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 20,
                            JeloId = 19,
                            KlijentId = 1,
                            Ocjena = 4.5
                        },
                        new
                        {
                            RejtingId = 21,
                            JeloId = 20,
                            KlijentId = 1,
                            Ocjena = 4.5
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("KrajRezervacije")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<bool?>("OnlinePlacanje")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("Placena")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PocetakRezervacije")
                        .HasColumnType("datetime2");

                    b.Property<string>("Poruka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Potvrdjena")
                        .HasColumnType("bit");

                    b.Property<bool?>("PotvrdjenaKlijent")
                        .HasColumnType("bit");

                    b.Property<string>("Sifra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StolId")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaId");

                    b.HasIndex(new[] { "KlijentId" }, "IX_Rezervacija_KlijentId");

                    b.HasIndex(new[] { "StolId" }, "IX_Rezervacija_StolId");

                    b.ToTable("Rezervacija");

                    b.HasData(
                        new
                        {
                            RezervacijaId = 1,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 1,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "SLK1NH",
                            Status = true,
                            StolId = 1
                        },
                        new
                        {
                            RezervacijaId = 2,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 1,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "P3PCGQ",
                            Status = true,
                            StolId = 1
                        },
                        new
                        {
                            RezervacijaId = 3,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 1,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "ZN60PV",
                            Status = true,
                            StolId = 1
                        },
                        new
                        {
                            RezervacijaId = 4,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2020, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 1,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = false,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "03JGTT",
                            Status = true,
                            StolId = 2
                        },
                        new
                        {
                            RezervacijaId = 23,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2020, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 1,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = false,
                            Placena = true,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = true,
                            PotvrdjenaKlijent = true,
                            Sifra = "DL4B5V",
                            Status = true,
                            StolId = 3
                        },
                        new
                        {
                            RezervacijaId = 22,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2020, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 2,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = false,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "KPJQ9X",
                            Status = true,
                            StolId = 2
                        },
                        new
                        {
                            RezervacijaId = 5,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2020, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 2,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = false,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "2VMPTI",
                            Status = true,
                            StolId = 3
                        },
                        new
                        {
                            RezervacijaId = 6,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 2,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = false,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "15M2KM",
                            Status = true,
                            StolId = 3
                        },
                        new
                        {
                            RezervacijaId = 7,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 2,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = false,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "OKQXUQ",
                            Status = true,
                            StolId = 1
                        },
                        new
                        {
                            RezervacijaId = 8,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 3,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "5OXX3D",
                            Status = true,
                            StolId = 2
                        },
                        new
                        {
                            RezervacijaId = 9,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 3,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "QTRTR0",
                            Status = true,
                            StolId = 1
                        },
                        new
                        {
                            RezervacijaId = 10,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 3,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "CQECIJ",
                            Status = true,
                            StolId = 3
                        },
                        new
                        {
                            RezervacijaId = 11,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 4,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "KT5VPS",
                            Status = true,
                            StolId = 2
                        },
                        new
                        {
                            RezervacijaId = 12,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 4,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "EQ5ZEG",
                            Status = true,
                            StolId = 2
                        },
                        new
                        {
                            RezervacijaId = 13,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 5,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "NB1VEP",
                            Status = true,
                            StolId = 2
                        },
                        new
                        {
                            RezervacijaId = 14,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 5,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "73SV5S",
                            Status = true,
                            StolId = 2
                        },
                        new
                        {
                            RezervacijaId = 15,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 5,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "EQ08WJ",
                            Status = true,
                            StolId = 2
                        },
                        new
                        {
                            RezervacijaId = 16,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 6,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "5THGH3",
                            Status = true,
                            StolId = 1
                        },
                        new
                        {
                            RezervacijaId = 17,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 6,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "8RYHRQ",
                            Status = true,
                            StolId = 2
                        },
                        new
                        {
                            RezervacijaId = 18,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 7,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "Z5IHL2",
                            Status = true,
                            StolId = 3
                        },
                        new
                        {
                            RezervacijaId = 19,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 7,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "9B25IJ",
                            Status = true,
                            StolId = 4
                        },
                        new
                        {
                            RezervacijaId = 20,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 7,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "RY36FB",
                            Status = true,
                            StolId = 4
                        },
                        new
                        {
                            RezervacijaId = 21,
                            DatumIzmjene = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 8,
                            KrajRezervacije = new DateTime(2023, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OnlinePlacanje = true,
                            Placena = false,
                            PocetakRezervacije = new DateTime(2023, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Potvrdjena = false,
                            PotvrdjenaKlijent = false,
                            Sifra = "Y3YIG8",
                            Status = true,
                            StolId = 2
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Stol", b =>
                {
                    b.Property<int>("StolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojMjesta")
                        .HasColumnType("int");

                    b.Property<string>("NazivStola")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StolId");

                    b.ToTable("Stol");

                    b.HasData(
                        new
                        {
                            StolId = 1,
                            BrojMjesta = 2,
                            NazivStola = "Stol br. 1"
                        },
                        new
                        {
                            StolId = 2,
                            BrojMjesta = 3,
                            NazivStola = "Stol br. 2"
                        },
                        new
                        {
                            StolId = 3,
                            BrojMjesta = 4,
                            NazivStola = "Stol br. 3"
                        },
                        new
                        {
                            StolId = 4,
                            BrojMjesta = 4,
                            NazivStola = "Stol br. 4"
                        },
                        new
                        {
                            StolId = 5,
                            BrojMjesta = 4,
                            NazivStola = "Stol br. 5"
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Transakcija", b =>
                {
                    b.Property<int>("TransakcijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<double>("Iznos")
                        .HasColumnType("float");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("RezervacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Sifra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.HasKey("TransakcijaId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Transakcija_KorisnikId");

                    b.HasIndex(new[] { "RezervacijaId" }, "IX_Transakcija_RezervacijaId");

                    b.ToTable("Transakcija");

                    b.HasData(
                        new
                        {
                            TransakcijaId = 1,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 1,
                            RezervacijaId = 1,
                            Sifra = "U3KUJU",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 2,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 20.0,
                            KorisnikId = 1,
                            RezervacijaId = 2,
                            Sifra = "66HE3E",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 3,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 15.0,
                            KorisnikId = 1,
                            RezervacijaId = 3,
                            Sifra = "K6LOLW",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 4,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 50.0,
                            KorisnikId = 1,
                            RezervacijaId = 4,
                            Sifra = "TINPAC",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 5,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 120.0,
                            KorisnikId = 1,
                            RezervacijaId = 5,
                            Sifra = "I1CR67",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 6,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 1,
                            RezervacijaId = 6,
                            Sifra = "1LXM5C",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 7,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 1,
                            RezervacijaId = 7,
                            Sifra = "ITS1PL",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 8,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 8,
                            Sifra = "3XXHGG",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 9,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 9,
                            Sifra = "S9F2QD",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 10,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 10,
                            Sifra = "ORHO7H",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 11,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 10,
                            Sifra = "939LHQ",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 12,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 10,
                            Sifra = "B7BNT4",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 13,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 10,
                            Sifra = "P7MFQ3",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 14,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 11,
                            Sifra = "UVAZ8E",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 15,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 11,
                            Sifra = "CCJU4H",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 16,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 12,
                            Sifra = "VL4AI1",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 17,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 12,
                            Sifra = "3FFCHI",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 18,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 12,
                            Sifra = "JYOQBC",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 19,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 2,
                            RezervacijaId = 12,
                            Sifra = "BAB54M",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 20,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 3,
                            RezervacijaId = 12,
                            Sifra = "18V3OA",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 21,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 3,
                            RezervacijaId = 13,
                            Sifra = "TL2HWU",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 22,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 3,
                            RezervacijaId = 13,
                            Sifra = "7719OZ",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 23,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 3,
                            RezervacijaId = 14,
                            Sifra = "XA7MG2",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 24,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 3,
                            RezervacijaId = 15,
                            Sifra = "G1FFMN",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 25,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 3,
                            RezervacijaId = 16,
                            Sifra = "DNXUMV",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 26,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 3,
                            RezervacijaId = 16,
                            Sifra = "ALZ90K",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 27,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 4,
                            RezervacijaId = 16,
                            Sifra = "UDQO0L",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 28,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 4,
                            RezervacijaId = 16,
                            Sifra = "11TRCY",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 29,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 4,
                            RezervacijaId = 17,
                            Sifra = "KRKM91",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 30,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 4,
                            RezervacijaId = 17,
                            Sifra = "H9TJR8",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 31,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 5,
                            RezervacijaId = 18,
                            Sifra = "6X1SJQ",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 32,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 5,
                            RezervacijaId = 18,
                            Sifra = "0R6Q2J",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 33,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 5,
                            RezervacijaId = 19,
                            Sifra = "1PJOP0",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 34,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 6,
                            RezervacijaId = 19,
                            Sifra = "R3SOHC",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 35,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 6,
                            RezervacijaId = 20,
                            Sifra = "4NN0NV",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 36,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 7,
                            RezervacijaId = 20,
                            Sifra = "U03W69",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 37,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 7,
                            RezervacijaId = 20,
                            Sifra = "SIKH1S",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 38,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 8,
                            RezervacijaId = 21,
                            Sifra = "RBXVGE",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 39,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 8,
                            RezervacijaId = 21,
                            Sifra = "KXBR44",
                            Status = true
                        },
                        new
                        {
                            TransakcijaId = 40,
                            Datum = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 25.0,
                            KorisnikId = 8,
                            RezervacijaId = 21,
                            Sifra = "0NQ9W3",
                            Status = true
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaId");

                    b.ToTable("Uloga");

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            Naziv = "Admin"
                        },
                        new
                        {
                            UlogaId = 2,
                            Naziv = "Uposlenik"
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Uposlenik", b =>
                {
                    b.Property<int>("UposlenikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumZaposlenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnickiRacunId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("UposlenikId");

                    b.HasIndex(new[] { "GradId" }, "IX_Uposlenik_GradId");

                    b.HasIndex(new[] { "KorisnickiRacunId" }, "IX_Uposlenik_KorisnickiRacunId")
                        .IsUnique();

                    b.ToTable("Uposlenik");

                    b.HasData(
                        new
                        {
                            UposlenikId = 1,
                            DatumZaposlenja = new DateTime(2021, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 1,
                            KorisnickiRacunId = 1,
                            Status = true
                        },
                        new
                        {
                            UposlenikId = 2,
                            DatumZaposlenja = new DateTime(2021, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 1,
                            KorisnickiRacunId = 2,
                            Status = true
                        },
                        new
                        {
                            UposlenikId = 3,
                            DatumZaposlenja = new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 2,
                            KorisnickiRacunId = 3,
                            Status = true
                        },
                        new
                        {
                            UposlenikId = 4,
                            DatumZaposlenja = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 1,
                            KorisnickiRacunId = 4,
                            Status = true
                        },
                        new
                        {
                            UposlenikId = 5,
                            DatumZaposlenja = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 1,
                            KorisnickiRacunId = 5,
                            Status = true
                        },
                        new
                        {
                            UposlenikId = 6,
                            DatumZaposlenja = new DateTime(2019, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 1,
                            KorisnickiRacunId = 6,
                            Status = false
                        },
                        new
                        {
                            UposlenikId = 7,
                            DatumZaposlenja = new DateTime(2019, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 1,
                            KorisnickiRacunId = 7,
                            Status = false
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.UposlenikUloga", b =>
                {
                    b.Property<int>("UposlenikUlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.Property<int>("UposlenikId")
                        .HasColumnType("int");

                    b.HasKey("UposlenikUlogaId");

                    b.HasIndex(new[] { "UlogaId" }, "IX_UposlenikUloga_UlogaId");

                    b.HasIndex(new[] { "UposlenikId" }, "IX_UposlenikUloga_UposlenikId");

                    b.ToTable("UposlenikUloga");

                    b.HasData(
                        new
                        {
                            UposlenikUlogaId = 1,
                            DatumIzmjene = new DateTime(2021, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlogaId = 1,
                            UposlenikId = 1
                        },
                        new
                        {
                            UposlenikUlogaId = 2,
                            DatumIzmjene = new DateTime(2021, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlogaId = 2,
                            UposlenikId = 1
                        },
                        new
                        {
                            UposlenikUlogaId = 3,
                            DatumIzmjene = new DateTime(2021, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlogaId = 2,
                            UposlenikId = 2
                        },
                        new
                        {
                            UposlenikUlogaId = 4,
                            DatumIzmjene = new DateTime(2021, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlogaId = 2,
                            UposlenikId = 3
                        },
                        new
                        {
                            UposlenikUlogaId = 5,
                            DatumIzmjene = new DateTime(2021, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlogaId = 2,
                            UposlenikId = 4
                        },
                        new
                        {
                            UposlenikUlogaId = 6,
                            DatumIzmjene = new DateTime(2021, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlogaId = 2,
                            UposlenikId = 5
                        },
                        new
                        {
                            UposlenikUlogaId = 7,
                            DatumIzmjene = new DateTime(2021, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlogaId = 2,
                            UposlenikId = 6
                        },
                        new
                        {
                            UposlenikUlogaId = 8,
                            DatumIzmjene = new DateTime(2021, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlogaId = 2,
                            UposlenikId = 7
                        });
                });

            modelBuilder.Entity("Monets.Api.Database.Favorit", b =>
                {
                    b.HasOne("Monets.Api.Database.Jelo", "Jelo")
                        .WithMany("Favorit")
                        .HasForeignKey("JeloId");

                    b.HasOne("Monets.Api.Database.Klijent", "Klijent")
                        .WithMany("Favorit")
                        .HasForeignKey("KlijentId");

                    b.Navigation("Jelo");

                    b.Navigation("Klijent");
                });

            modelBuilder.Entity("Monets.Api.Database.Jelo", b =>
                {
                    b.HasOne("Monets.Api.Database.Kategorija", "Kategorija")
                        .WithMany("Jelo")
                        .HasForeignKey("KategorijaId");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("Monets.Api.Database.JeloMeni", b =>
                {
                    b.HasOne("Monets.Api.Database.Jelo", "Jelo")
                        .WithMany("JeloMeni")
                        .HasForeignKey("JeloId");

                    b.HasOne("Monets.Api.Database.Meni", "Meni")
                        .WithMany("JeloMeni")
                        .HasForeignKey("MeniId");

                    b.Navigation("Jelo");

                    b.Navigation("Meni");
                });

            modelBuilder.Entity("Monets.Api.Database.JeloRezervacija", b =>
                {
                    b.HasOne("Monets.Api.Database.Jelo", "Jelo")
                        .WithMany("JeloRezervacija")
                        .HasForeignKey("JeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monets.Api.Database.Rezervacija", "Rezervacija")
                        .WithMany("JeloRezervacija")
                        .HasForeignKey("RezervacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jelo");

                    b.Navigation("Rezervacija");
                });

            modelBuilder.Entity("Monets.Api.Database.Klijent", b =>
                {
                    b.HasOne("Monets.Api.Database.Grad", "Grad")
                        .WithMany("Klijent")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monets.Api.Database.KorisnickiRacun", "KorisnickiRacun")
                        .WithOne("Klijent")
                        .HasForeignKey("Monets.Api.Database.Klijent", "KorisnickiRacunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("KorisnickiRacun");
                });

            modelBuilder.Entity("Monets.Api.Database.Rejting", b =>
                {
                    b.HasOne("Monets.Api.Database.Jelo", "Jelo")
                        .WithMany("Rejting")
                        .HasForeignKey("JeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monets.Api.Database.Klijent", "Klijent")
                        .WithMany("Rejting")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jelo");

                    b.Navigation("Klijent");
                });

            modelBuilder.Entity("Monets.Api.Database.Rezervacija", b =>
                {
                    b.HasOne("Monets.Api.Database.Klijent", "Klijent")
                        .WithMany("Rezervacija")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monets.Api.Database.Stol", "Stol")
                        .WithMany("Rezervacija")
                        .HasForeignKey("StolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klijent");

                    b.Navigation("Stol");
                });

            modelBuilder.Entity("Monets.Api.Database.Transakcija", b =>
                {
                    b.HasOne("Monets.Api.Database.KorisnickiRacun", "Korisnik")
                        .WithMany("Transakcija")
                        .HasForeignKey("KorisnikId");

                    b.HasOne("Monets.Api.Database.Rezervacija", "Rezervacija")
                        .WithMany("Transakcija")
                        .HasForeignKey("RezervacijaId");

                    b.Navigation("Korisnik");

                    b.Navigation("Rezervacija");
                });

            modelBuilder.Entity("Monets.Api.Database.Uposlenik", b =>
                {
                    b.HasOne("Monets.Api.Database.Grad", "Grad")
                        .WithMany("Uposlenik")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monets.Api.Database.KorisnickiRacun", "KorisnickiRacun")
                        .WithOne("Uposlenik")
                        .HasForeignKey("Monets.Api.Database.Uposlenik", "KorisnickiRacunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("KorisnickiRacun");
                });

            modelBuilder.Entity("Monets.Api.Database.UposlenikUloga", b =>
                {
                    b.HasOne("Monets.Api.Database.Uloga", "Uloga")
                        .WithMany("UposlenikUloga")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monets.Api.Database.Uposlenik", "Uposlenik")
                        .WithMany("UposlenikUloga")
                        .HasForeignKey("UposlenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uloga");

                    b.Navigation("Uposlenik");
                });

            modelBuilder.Entity("Monets.Api.Database.Grad", b =>
                {
                    b.Navigation("Klijent");

                    b.Navigation("Uposlenik");
                });

            modelBuilder.Entity("Monets.Api.Database.Jelo", b =>
                {
                    b.Navigation("Favorit");

                    b.Navigation("JeloMeni");

                    b.Navigation("JeloRezervacija");

                    b.Navigation("Rejting");
                });

            modelBuilder.Entity("Monets.Api.Database.Kategorija", b =>
                {
                    b.Navigation("Jelo");
                });

            modelBuilder.Entity("Monets.Api.Database.Klijent", b =>
                {
                    b.Navigation("Favorit");

                    b.Navigation("Rejting");

                    b.Navigation("Rezervacija");
                });

            modelBuilder.Entity("Monets.Api.Database.KorisnickiRacun", b =>
                {
                    b.Navigation("Klijent");

                    b.Navigation("Transakcija");

                    b.Navigation("Uposlenik");
                });

            modelBuilder.Entity("Monets.Api.Database.Meni", b =>
                {
                    b.Navigation("JeloMeni");
                });

            modelBuilder.Entity("Monets.Api.Database.Rezervacija", b =>
                {
                    b.Navigation("JeloRezervacija");

                    b.Navigation("Transakcija");
                });

            modelBuilder.Entity("Monets.Api.Database.Stol", b =>
                {
                    b.Navigation("Rezervacija");
                });

            modelBuilder.Entity("Monets.Api.Database.Uloga", b =>
                {
                    b.Navigation("UposlenikUloga");
                });

            modelBuilder.Entity("Monets.Api.Database.Uposlenik", b =>
                {
                    b.Navigation("UposlenikUloga");
                });
#pragma warning restore 612, 618
        }
    }
}
